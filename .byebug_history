exit
var all
var local
offspring.shift.nil?
offspring.shift
offspring
offsrping
shift
exit
offspring
shift
quit
offspring.shift?
shift.sites_available?
shift.nil?
shift
continue
offspring.valid?
offspring
exit
offspring.shift.nil?
offspring.shift.valid?
offspring.valid?
offspring
shift.valid?
exit
offspring.valid?
offspring
shift
exit
offspring.shift.valid?
offspring.shift=shift
offspring.shift.nil?
offspring.shift
shift
offspring.valid?
offspring
offpsring
shift.save
shift
exit
shift.sites_available?
shift.sites_available
shift.sites_available?
shift.valid?
shift.prebooked=shift.room.capacity
shift.room.capacity
shift.valid?
shift
exit
shift.offsprings
shift.offspring
shift
shift.sites_available?
shift
exit
shift.sites_available
shift
exit
shift.sites_available
offspring.save
shift.sites_available
shift.sites_available?
offspring
offspring.valid?
offspring.shift=shift
shift.save
offspring
shift.sites_available?
shift.sites_available
shift.sites_available?
shift.room.capacity
shift.prebooked=29
shift.room.capacity
shift
shift.sites_available
shift.sites_available?
exit
shift.sites_available
shift.sites_available?
shift.has_space?
shift
exit
shift.sites_available?
shift.room.capacity
shift.sites_available?
shift
shift.available?
shift
exit
shift.sites_available?
shift
shift.sites_available?
shift.save
shift.sites_available?
shift
exit
shift.sites_available?
shift
shift.offsrping.count
shift.offsprings.count
shift.room.capacity
shift.room
shift
shift.room.space
shift
self
shift.save
Shift.count
shift.count
offspring
shift
exit
offspring.valid?
offspring
offspring.shift=shift
shift.save
offspring.shift=shift
offspring
offspring.shift=shift
shift
offspring
response
resposne
continue
@shift.offsprings.each
@shift
up
continue
sh.nil?
sh=Shift.find_by_id(params[400])==nil
sh=Shift.find_by_id(params["id"])
sh=Shift.find_by_id(params["id]")
params
var all
continue
od.save!
od
of
od.shift=nil
od
of
od=Offspring.find_by_id(params["id"])
params
continue
of
exit
of
~of
continue
Offspring.find_by_id(params["format"]).shift
Shift.find_by_id(params["shift"])
params["shift"]
params
Offspring.find_by_id(params["format"])
Offsprings.Find_by_id(params["format"])
Offspring.Find_by_id(params["format"])
params["format"]
offspring
@offspring
var all
var local
var
params
continue
params
continue
request
url
params
var all
continue
@shift
@offspring
@offsrping
params
var all
continue
var all
var
up
continue
var local
var
var const
var
ls
var global
var
var instance
var
var global
var
@_controller
room
var all
up
continue
exit
@offspring
@rooms
var all
var local
var locals
var
continue
var const
local assigns
var args
var
var instance
var local
var
var_local
select
params
continue
params
continue
offspring.shift.day_of_week
offspring.shift
offspring
offsrping
continue
exit
self
self.start_time=
self.start_time
self.start_time=DateTime.new(year=2001, month=1, day=self.day_of_week, hour=self.start_time.hour||"00", min=self.start_time.min)
self.start_time=DateTime.new(year=2001, month=1, day=self.day_of_week, hour=self.start_time.hour||00, min=self.start_time.min)
self.start_time=DateTime.new(year=2001, month=1, day=self.day_of_week, hour=self.start_time.hour, min=self.start_time.min)
exit
self
self.start_time=
self
self.start_time=15
start_time=15
self
cont
continue
room.shifts.where(day_of_week: 1).each
room.shifts.where(day_of_week: 3).each
room.shifts.where(day_of_week: 3)
room.shifts.where(day_of_week: 2)
room.shifts.where(day_of_week: 1)
room.shifts.find_by("day_of_week=2")
room.shifts.find_by("day_of_week=1")
room.shifts.find_by("day_of_week=1"
room.shifts
room
continue
shifts
up
continue
shifts
up
